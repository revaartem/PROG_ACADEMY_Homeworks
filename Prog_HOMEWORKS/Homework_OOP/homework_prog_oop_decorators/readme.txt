
Part 1:

1)   Создайте  декоратор,  который  будет  подсчитывать,  сколько  раз  была
вызвана декорируемая функция.

/task_1/task_1.py

2)   Создайте  декоратор,  который  зарегистрирует  декорируемую  функцию  в
списке функций, для обработки последовательности.

/task_1/task_2.py

3) Предположим,  в  классе  определен  метод  __str__,  который  возвращает
строку  на  основании  класса.  Создайте  такой  декоратор  для  этого  метода,
чтобы  полученная  строка  сохранялась  в  текстовый  файл,  имя  которого
совпадает с именем класса, метод которого вы декорировали.

/task_1/task_3.py

4) Создайте декоратор с параметрами для проведения хронометража работы
той или иной функции. Параметрами должны выступать то, сколько раз нужно
запустить  декорируемую  функцию  и  в  какой  файл  сохранить  результаты
хронометража. Цель - провести хронометраж декорируемой функции.

/task_1/task_4.py

Part 2:

1) Создайте  декоратор,  который  зарегистрирует  декорируемый  класс  в
списке классов.

/task_2/task_1.py

2) Создайте  декоратор  класса  с  параметром.  Параметром  должна  быть
строка,  которая  должна  дописываться  (слева)  к  результату  работы  метода
__str__.

/task_2/task_2.py

3)   Для класса Box напишите статический метод, который будет подсчитывать
суммарный объем двух ящиков, которые будут его параметрами.

/task_2/task_3.py
